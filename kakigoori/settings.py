"""
Django settings for kakigoori project.

Generated by 'django-admin startproject' using Django 4.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from pathlib import Path

import pika

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

DEBUG = os.environ.get("DEBUG", False)
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "").split(",")
SECRET_KEY = os.environ.get("SECRET_KEY")

# Application definition

INSTALLED_APPS = [
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "images.apps.ImagesConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "kakigoori.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "kakigoori.wsgi.application"

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "INFO",
    },
}


def environ_get_or_raise(env_var):
    var = os.environ.get(env_var)
    if var is None:
        raise EnvironmentError(f"Environment variable {env_var} not set")
    return var


RABBITMQ_HOST = environ_get_or_raise("RABBITMQ_HOST")

RABBITMQ_PORT = os.environ.get("RABBITMQ_PORT")
if not RABBITMQ_PORT:
    RABBITMQ_PORT = 5672

RABBITMQ_CONNECTION_PARAMETERS = pika.ConnectionParameters(
    host=RABBITMQ_HOST, port=RABBITMQ_PORT
)

if os.environ.get("RABBITMQ_USER") and os.environ.get("RABBITMQ_PASSWORD"):
    RABBITMQ_USER = os.environ.get("RABBITMQ_USER")
    RABBITMQ_PASSWORD = os.environ.get("RABBITMQ_PASSWORD")
    RABBITMQ_CONNECTION_PARAMETERS.credentials = pika.PlainCredentials(
        username=RABBITMQ_USER, password=RABBITMQ_PASSWORD
    )

if os.environ.get("RABBITMQ_VHOST"):
    RABBITMQ_CONNECTION_PARAMETERS.virtual_host = os.environ.get("RABBITMQ_VHOST")

S3_ENDPOINT = environ_get_or_raise("S3_ENDPOINT")
S3_KEY_ID = environ_get_or_raise("S3_KEY_ID")
S3_SECRET_KEY = environ_get_or_raise("S3_SECRET_KEY")
S3_BUCKET = environ_get_or_raise("S3_BUCKET")
S3_PUBLIC_BASE_PATH = environ_get_or_raise("S3_PUBLIC_BASE_PATH")

POSTGRES_HOST = environ_get_or_raise("POSTGRES_HOST")
POSTGRES_USER = environ_get_or_raise("POSTGRES_USER")
POSTGRES_PASSWORD = environ_get_or_raise("POSTGRES_PASSWORD")
POSTGRES_DB = environ_get_or_raise("POSTGRES_DB")
POSTGRES_PORT = os.environ.get("POSTGRES_PORT", "5432")

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": POSTGRES_DB,
        "USER": POSTGRES_USER,
        "PASSWORD": POSTGRES_PASSWORD,
        "HOST": POSTGRES_HOST,
        "PORT": POSTGRES_PORT,
    }
}

if os.environ.get("SENTRY_DSN"):
    import sentry_sdk

    sentry_sdk.init(
        dsn=os.environ.get("SENTRY_DSN"),
        max_breadcrumbs=50,
        enable_logs=True,
        traces_sample_rate=1.0,
    )
